0: PacketMotionData
Dados de movimento dos carros (posi√ß√£o, velocidade, acelera√ß√£o, dire√ß√£o, etc).
1: PacketSessionData
Dados gerais da sess√£o (clima, tipo de sess√£o, n√∫mero de voltas, temperatura, status do safety car, etc).
2: PacketLapData
Dados de volta de cada carro (tempo de volta, setor, posi√ß√£o, n√∫mero da volta, delta para l√≠der e carro da frente, status de pit, penalidades, etc).
3: PacketEventData
Eventos especiais (volta mais r√°pida, aposentadoria, penalidade, vencedor, colis√£o, etc).
4: PacketParticipantsData
Dados dos participantes (nome, n√∫mero, nacionalidade, equipe, se √© IA ou humano, etc).
5: PacketCarSetupData
Setup do carro (asas, cambagem, toe, press√£o dos pneus, combust√≠vel, etc).
6: PacketCarTelemetryData
Telemetria do carro (velocidade, acelera√ß√£o, freio, marcha, temperatura dos pneus e freios, press√£o dos pneus, etc).
7: PacketCarStatusData
Status do carro (composto do pneu, idade do pneu, combust√≠vel, DRS, ERS, modo de combust√≠vel, etc).
8: PacketFinalClassificationData
Classifica√ß√£o final da corrida (posi√ß√£o final, voltas completadas, tempo total, penalidades, pneus usados, etc).
9: PacketLobbyInfoData
Informa√ß√µes do lobby (jogadores na sala, status de pronto, equipe, nacionalidade, etc).
10: PacketCarDamageData
Dados de dano do carro (desgaste e dano dos pneus, asa dianteira/traseira, assoalho, difusor, sidepod, falha de DRS/ERS, danos no motor, etc).
11: PacketSessionHistoryData
Hist√≥rico da sess√£o (tempos de volta, setores, stints de pneus, etc).
12: PacketTyreSetsData
Dados dos conjuntos de pneus dispon√≠veis e usados (composto, desgaste, vida √∫til, etc).
13: PacketMotionExData
Dados extras de movimento (suspens√£o, for√ßas nas rodas, √¢ngulos, etc).
14: PacketTimeTrialData
Dados de time trial (melhores tempos do jogador, rival, etc).

üß± Comandos B√°sicos
Comando	O que faz
plt.plot(x, y)	Gr√°fico de linha
plt.bar(x, y)	Gr√°fico de barras
plt.barh(x, y)	Gr√°fico de barras horizontal
plt.scatter(x, y)	Gr√°fico de dispers√£o (pontos)
plt.pie(x)	Gr√°fico de pizza
plt.hist(x)	Histograma
plt.boxplot(x)	Boxplot (distribui√ß√£o estat√≠stica)

‚úçÔ∏è Anota√ß√µes e Estilo
Comando	Uso
plt.title("T√≠tulo")	Adiciona um t√≠tulo ao gr√°fico
plt.xlabel("Eixo X")	Nomeia o eixo X
plt.ylabel("Eixo Y")	Nomeia o eixo Y
plt.grid(True)	Mostra grade
plt.legend()	Mostra legenda (se tiver labels)
plt.text(x, y, "Texto")	Escreve texto no gr√°fico
plt.xticks([...])	Define os valores no eixo X
plt.yticks([...])	Define os valores no eixo Y

üé® Cores e Estilo
Par√¢metro	O que faz
color='red'	Cor da linha/barras/pontos
linestyle='--'	Estilo da linha (pontilhada, cont√≠nua, etc)
marker='o'	Marcador nos pontos de linha
alpha=0.5	Transpar√™ncia (0 a 1)
linewidth=2	Espessura da linha

Proximos passos :
faz uma IA rundimenta
üß≠ Principais m√≥dulos

plotly.express as px ‚Äî API simples e r√°pida (recomendada para a maior parte dos gr√°ficos).

plotly.graph_objects as go ‚Äî constru√ß√£o detalhada por objetos (full control).

plotly.subplots.make_subplots ‚Äî criar layouts com m√∫ltiplos eixos/subplots.

plotly.io as pio ‚Äî I/O: mostrar, salvar, configurar renderers.

plotly.figure_factory as ff ‚Äî utilit√°rios e gr√°ficos "pr√©-montados" (heatmap anotado, tabela, dendrograma).

dash / dash_core_components ‚Äî integra√ß√£o para apps interativos (se quiser UI).

üß© Plotly Express (px) ‚Äî os comandos mais usados

Uso: px.<tipo>(data_frame, x=..., y=..., color=..., facet_row=..., animation_frame=...)

Principais fun√ß√µes:

px.scatter(...)

px.line(...)

px.bar(...)

px.histogram(...)

px.box(...)

px.violin(...)

px.pie(...)

px.density_heatmap(...) / px.density_contour(...)

px.imshow(...) (para imagens / matrizes)

px.scatter_3d(...)

px.line_3d(...) (usar px.scatter_3d mais comum)

px.choropleth(...) / px.choropleth_mapbox(...) (mapas)

px.treemap(...), px.sunburst(...), px.icicle(...) (hierarquias)

px.parallel_coordinates(...), px.parallel_categories(...)

px.sunburst(...), px.sunburst

px.scatter_matrix(...) (pairplot)

Exemplo:

import plotly.express as px
fig = px.scatter(df, x="lap_time", y="speed", color="driver", size="tyre_wear")
fig.show()

üèóÔ∏è graph_objects (go) ‚Äî construindo passo a passo

Voc√™ constr√≥i traces e layout explicitamente.

Traces (tipos principais):

go.Scatter (2D lines/markers)

go.Bar

go.Box

go.Violin

go.Histogram

go.Heatmap

go.Contour

go.Surface (3D surface)

go.Mesh3d

go.Scatter3d

go.Pie

go.Choropleth

go.Indicator (gauges/metrics)

go.Table (tabelas)

go.Candlestick (financeiro)

Exemplo:

import plotly.graph_objects as go
fig = go.Figure()
fig.add_trace(go.Scatter(x=x, y=y, mode='lines+markers', name='piloto'))
fig.update_layout(title='Tempo por volta', xaxis_title='Volta', yaxis_title='Tempo (s)')
fig.show()

üîÄ Subplots, eixos m√∫ltiplos, e grids
from plotly.subplots import make_subplots

fig = make_subplots(rows=2, cols=2, shared_xaxes=True,
                    subplot_titles=("A", "B", "C", "D"),
                    specs=[[{"type":"xy"}, {"type":"xy"}],
                           [{"type":"scene"}, {"type":"domain"}]])  # "scene" para 3D
fig.add_trace(go.Scatter(...), row=1, col=1)
fig.add_trace(go.Bar(...), row=1, col=2)
fig.add_trace(go.Scatter3d(...), row=2, col=1)
fig.add_trace(go.Pie(...), row=2, col=2)
fig.update_layout(height=800, width=1200)
fig.show()

‚ñ∂Ô∏è Anima√ß√µes

No px: animation_frame e animation_group.

fig = px.scatter(df, x="x", y="y", animation_frame="lap", animation_group="driver")
fig.show()


Em go: usar frames e fig.update(frames=...), fig.update_layout(updatemenus=...).

üîÅ Atualizar figuras (interatividade program√°tica)

fig.update_traces(...) ‚Äî altera propriedades dos traces (cor, marker, opacity).

fig.update_layout(...) ‚Äî altera layout (t√≠tulos, legendas, margens).

fig.add_trace(...) / fig.data / fig.data[i] ‚Äî manipular dados direto.

fig.update_yaxes(...), fig.update_xaxes(...).

Exemplo:

fig.update_traces(marker=dict(size=6), selector=dict(mode='markers'))
fig.update_layout(title_text="Novo t√≠tulo")

üíæ Salvar e exportar

fig.show() ‚Äî mostra no navegador (ou notebook).

pio.write_html(fig, "grafico.html", full_html=True) ‚Äî salva HTML interativo.

fig.write_html("grafico.html")

fig.write_image("grafico.png") ‚Äî precisa kaleido (ou orca) instalado.

pio.to_json(fig) / pio.write_json(...) ‚Äî salvar figura em JSON do Plotly.

üîß plotly.io & renderers

pio.renderers.default = "notebook" / "browser" / "svg" / "png"

Ex.: pio.renderers.default = "browser"

üß∞ figure_factory (ff)

Utilit√°rios e gr√°ficos ajudantes:

ff.create_annotated_heatmap(...)

ff.create_table(...)

ff.create_dendrogram(...)

ff.create_quiver(...) (vetores)
(use docs para fun√ß√µes espec√≠ficas)

üìà M√©tricas e indicadores

go.Indicator para KPIs (gauge, number + delta).

fig.add_trace(go.Indicator(...)) ‚Äî √≥timo para dashboards.

üîé Ferramentas √∫teis (intera√ß√£o do usu√°rio)

fig.update_layout(hovermode='x unified') ‚Äî hover unificado.

Ferramentas de zoom, box select, lasso, autoscale.

fig.data[i].selectedpoints ‚Äî trabalhar com sele√ß√£o program√°tica.

üß† Integra√ß√£o com Dash (para UIs interativas)

dash permite callbacks reativos (@app.callback) usando Input, Output, State.

Plotly e Dash s√£o feitos para trabalhar juntos: use dcc.Graph(figure=fig).

üßæ Exemplo m√≠nimo completo (PX + salvar)
import plotly.express as px
df = px.data.iris()
fig = px.scatter(df, x='sepal_length', y='sepal_width', color='species', size='petal_length')
fig.write_html("iris_scatter.html")
fig.show()

üîç Dicas r√°pidas / truques

Use px para prototipar r√°pido; se precisar de ajustes finos, converta para go com fig = px ...; fig.update_traces(...).

Para dados grandes, use scattergl em vez de scatter (go.Scatter(mode='markers', marker={'symbol':'circle'}, ...) com render_mode='webgl' em vers√µes recentes).

Prefira kaleido para exportar imagens (mais simples que orca).

fig.to_dict() devolve a representa√ß√£o serializ√°vel (√∫til para salvar estado).

‚úÖ Refer√™ncia resumida ‚Äî M√©todos/Comandos mais importantes

px.scatter, px.line, px.bar, px.histogram, px.box, px.imshow, px.choropleth, px.treemap

go.Figure(), go.Scatter, go.Bar, go.Heatmap, go.Scatter3d, go.Surface, go.Indicator

fig.add_trace(), fig.update_traces(), fig.update_layout(), fig.update_xaxes(), fig.update_yaxes()

make_subplots(), ff.create_annotated_heatmap()

fig.show(), fig.write_html(), fig.write_image(), pio.to_json()

animation_frame (px) / frames (go)

pio.renderers.default = 'browser' / 'notebook'